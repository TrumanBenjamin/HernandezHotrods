<main class="admin-page">
  <header class="admin-header">
    <h1>Admin</h1>
    <h2 class="admin-greeting">Hello, Truman!</h2>
    <form action="/auth/logout" method="post">
        <button class="admin btn-send"><span>Log out</span></button>
    </form>
  </header>

  <!-- Optional success/error flash area -->
  <% if (typeof flash !== 'undefined') { %>
    <div class="admin-flash">
      <% if (flash.success) { %><p class="ok"><%= flash.success %></p><% } %>
      <% if (flash.error) { %><p class="bad"><%= flash.error %></p><% } %>
    </div>
  <% } %>

    <section class="admin-section" id="sec-builds">
    <div class="admin-section__head">
        <h2>Builds</h2>

        <!-- Row 1: Current / Completed -->
        <div class="admin-section__tabs tabs-row tabs-build-kind">
          <button class="tab kind-tab is-active" data-kind="current">Current</button>
          <button class="tab kind-tab" data-kind="completed">Completed</button>
        </div>

        <!-- Row 2a: Actions for CURRENT -->
        <div class="admin-section__tabs tabs-row tabs-build-action is-active" data-kind="current">
          <button class="tab action-tab is-active" data-tab="add">Add</button>
          <button class="tab action-tab" data-tab="update">Update</button>
          <button class="tab action-tab" data-tab="delete">Delete</button>
        </div>

        <!-- Row 2b: Actions for COMPLETED -->
        <div class="admin-section__tabs tabs-row tabs-build-action" data-kind="completed" hidden>
          <button class="tab action-tab is-active" data-tab="add">Add</button>
          <button class="tab action-tab" data-tab="update">Update</button>
          <button class="tab action-tab" data-tab="delete">Delete</button>
        </div>
    </div>

    <div class="admin-section__body">
        <!-- ============== CURRENT ============== -->
        <div class="build-kind-panel is-active" data-kind-panel="current">
        <!-- ADD CURRENT -->
        <form class="panel is-active" id="current-add" action="/admin/builds/add" method="post" enctype="multipart/form-data">
            <input type="hidden" name="is_completed" value="false">
            <div class="grid">
            <label>Owner Name
                <input name="owner_name" placeholder="First Last" required>
            </label>
            <label>Name (Year Make Model)
                <input name="name" placeholder="1969 Camaro RS" required>
            </label>
            </div>
            <label>Description
            <textarea name="subtitle" rows="5" placeholder="A semi-lengthy description…" required></textarea>
            </label>
            <div class="grid">
              <label>Thumbnail Image (Visible on "Current Builds" Page)
                <input type="file" name="thumb_image" accept="image/*" required>
              </label>
              <label>Fullscreen Main Image
                <input type="file" name="hero_image" accept="image/*" required>
              </label>
            </div>
            <label>Photos (50–100+)
            <input type="file" name="photos" accept="image/*" multiple>
            </label>
            <button type="submit" class="btn-red">Create Current Build</button>
        </form>

        <!-- UPDATE CURRENT -->
        <form class="panel" id="current-update" action="/admin/builds/update" method="post" enctype="multipart/form-data">
            <label>Select Current Build
            <select name="build_id" required>
                <% (builds || []).filter(b => !b.is_completed).forEach(b => { %>
                <option value="<%= b.id %>"><%= b.name %></option>
                <% }) %>
            </select>
            </label>
            <div class="grid">
            <label>Owner Name
                <input name="owner_name" placeholder="(no change)">
            </label>
            <label>Name (Year Make Model)
                <input name="name" placeholder="(no change)">
            </label>
            </div>
            <label>Description
            <textarea name="subtitle" rows="5" placeholder="(no change)"></textarea>
            </label>
            <div class="grid">
              <label>Replace Thumbnail (optional)
                <input type="file" name="thumb_image" accept="image/*">
              </label>
              <label>Replace Hero (optional)
                <input type="file" name="hero_image" accept="image/*">
              </label>
            </div>
            <label>Add More Photos (optional)
            <input type="file" name="photos" accept="image/*" multiple>
            </label>
            <button type="submit" class="btn-red">Save Changes</button>
        </form>

        <!-- DELETE CURRENT -->
        <form class="panel" id="current-delete" action="/admin/builds/delete" method="post" onsubmit="return confirmDelete(this)">
            <label>Select Current Build to Delete
            <select name="build_id" required>
                <% (builds || []).filter(b => !b.is_completed).forEach(b => { %>
                <option value="<%= b.id %>"><%= b.name %></option>
                <% }) %>
            </select>
            </label>
            <button type="submit" class="btn-outline">Delete Build</button>
        </form>
        </div>

        <!-- ============== COMPLETED ============== -->
        <div class="build-kind-panel" data-kind-panel="completed">
        <!-- Placeholder forms; we’ll customize fields after you tell me requirements -->

        <!-- ADD COMPLETED -->
        <form class="panel is-active" id="completed-add"
              action="/admin/builds/add-completed"
              method="post" enctype="multipart/form-data">

          <input type="hidden" name="is_completed" value="true">

          <!-- Basic -->
          <div class="grid">
            <label>Owner Name
              <input name="owner_name" placeholder="First Last" required>
            </label>
            <label>Name (Year Make Model)
              <input name="name" placeholder="1969 Camaro RS" required>
            </label>
          </div>

          <!-- ---------- SPEC SECTIONS ---------- -->
          <fieldset class="specs">
            <legend>Engine &amp; Drivetrain</legend>
            <div class="spec-list" data-section="engine">
              <!-- one input present by default -->
              <div class="spec-row">
                <input name="sections[engine][]" placeholder="e.g., 6.2L LS with mild cam & headers" required>
                <button type="button" class="spec-remove" aria-label="Remove item">&times;</button>
              </div>
            </div>
            <button type="button" class="btn-outline spec-add" data-target="engine">+ Add bullet</button>
            <label class="section-image">
              <span>Section Image: Engine &amp; Drivetrain</span>
              <input type="file" name="image_engine" accept="image/*" required>
            </label>
          </fieldset>

          <fieldset class="specs">
            <legend>Chassis &amp; Suspension</legend>
            <div class="spec-list" data-section="chassis">
              <div class="spec-row">
                <input name="sections[chassis][]" placeholder="e.g., Coilovers w/ adjustable damping" required>
                <button type="button" class="spec-remove" aria-label="Remove item">&times;</button>
              </div>
            </div>
            <button type="button" class="btn-outline spec-add" data-target="chassis">+ Add bullet</button>
          </fieldset>

          <fieldset class="specs">
            <legend>Interior &amp; Electronics</legend>
            <div class="spec-list" data-section="interior">
              <div class="spec-row">
                <input name="sections[interior][]" placeholder="e.g., Digital dash cluster">
                <button type="button" class="spec-remove" aria-label="Remove item">&times;</button>
              </div>
            </div>
            <button type="button" class="btn-outline spec-add" data-target="interior">+ Add bullet</button>
          </fieldset>

          <fieldset class="specs">
            <legend>Body &amp; Paint</legend>
            <div class="spec-list" data-section="body">
              <div class="spec-row">
                <input name="sections[body][]" placeholder="e.g., Graphite grey, satin stripes">
                <button type="button" class="spec-remove" aria-label="Remove item">&times;</button>
              </div>
            </div>
            <button type="button" class="btn-outline spec-add" data-target="body">+ Add bullet</button>
          </fieldset>

          <!-- ---------- IMAGE SLOTS (single each) ---------- -->
          <div class="grid">
            <label>Thumbnail Image (Visible on "Completed Builds" Page)
              <input type="file" name="thumb_image" accept="image/*" required>
            </label>
            <label>Fullscreen Main Image
              <input type="file" name="hero_image" accept="image/*" required>
            </label>
          </div>

          <div class="grid">
            <label>Section Image: Engine &amp; Drivetrain
              <input type="file" name="image_engine" accept="image/*" required>
            </label>
            <label>Section Image: Chassis &amp; Suspension
              <input type="file" name="image_chassis" accept="image/*" required>
            </label>
          </div>

          <div class="grid">
            <label>Section Image: Interior &amp; Electronics
              <input type="file" name="image_interior" accept="image/*" required>
            </label>
            <label>Section Image: Body &amp; Paint
              <input type="file" name="image_body" accept="image/*" required>
            </label>
          </div>

          <!-- ---------- EXTRA PHOTOS (like current) ---------- -->
          <label>Additional Photos (optional, 50–100+)
            <input type="file" name="photos" accept="image/*" multiple>
          </label>

          <button type="submit" class="btn-red">Create Completed Build</button>
        </form>

        <!-- UPDATE COMPLETED -->
        <form class="panel" id="completed-update" action="/admin/builds/update-completed" method="post" enctype="multipart/form-data">
          <label>Select Completed Build
            <select name="build_id" required>
              <% (builds || []).filter(b => b.is_completed).forEach(b => { %>
                <option value="<%= b.id %>"><%= b.name %></option>
              <% }) %>
            </select>
          </label>

          <div class="grid">
            <label>Owner Name
              <input name="owner_name" placeholder="(no change)">
            </label>
            <label>Name (Year Make Model)
              <input name="name" placeholder="(no change)">
            </label>
          </div>

          <label>Description
            <textarea name="subtitle" rows="5" placeholder="(no change)"></textarea>
          </label>

          <!-- ---------- SPEC SECTIONS (append-only here) ---------- -->
          <fieldset class="specs">
            <legend>Engine &amp; Drivetrain — bullets</legend>
            <div class="spec-list" data-section="engine"></div>
            <button type="button" class="btn-outline spec-add" data-target="engine">+ Add bullet</button>
          </fieldset>

          <fieldset class="specs">
            <legend>Chassis &amp; Suspension — bullets</legend>
            <div class="spec-list" data-section="chassis"></div>
            <button type="button" class="btn-outline spec-add" data-target="chassis">+ Add bullet</button>
          </fieldset>

          <fieldset class="specs">
            <legend>Interior &amp; Electronics — bullets</legend>
            <div class="spec-list" data-section="interior"></div>
            <button type="button" class="btn-outline spec-add" data-target="interior">+ Add bullet</button>
          </fieldset>

          <fieldset class="specs">
            <legend>Body &amp; Paint — bullets</legend>
            <div class="spec-list" data-section="body"></div>
            <button type="button" class="btn-outline spec-add" data-target="body">+ Add bullet</button>
          </fieldset>

          <!-- ---------- OPTIONAL REPLACEMENTS FOR FIXED IMAGES ---------- -->
          <div class="grid">
            <label>Replace Thumbnail Image (Visible on "Completed Builds" Page)
              <input type="file" name="thumb_image" accept="image/*">
            </label>
            <label>Replace Fullscreen Main Image
              <input type="file" name="hero_image" accept="image/*">
            </label>
          </div>

          <div class="grid">
            <label>Replace Engine &amp; Drivetrain
              <input type="file" name="image_engine" accept="image/*">
            </label>
            <label>Replace Chassis &amp; Suspension
              <input type="file" name="image_chassis" accept="image/*">
            </label>
          </div>

          <div class="grid">
            <label>Replace Interior &amp; Electronics
              <input type="file" name="image_interior" accept="image/*">
            </label>
            <label>Replace Body &amp; Paint
              <input type="file" name="image_body" accept="image/*">
            </label>
          </div>

          <!-- ---------- EXTRA PHOTOS (5.jpg+) ---------- -->
          <label>Add More Photos (optional, 50-100+)
            <input type="file" name="photos" accept="image/*" multiple>
          </label>

          <button type="submit" class="btn-red">Save Changes</button>
        </form>

        <!-- DELETE COMPLETED -->
        <form class="panel" id="completed-delete" action="/admin/builds/delete-completed" method="post" onsubmit="return confirmDelete(this)">
            <label>Select Completed Build to Delete
            <select name="build_id" required>
                <% (builds || []).filter(b => b.is_completed).forEach(b => { %>
                <option value="<%= b.id %>"><%= b.name %></option>
                <% }) %>
            </select>
            </label>
            <button type="submit" class="btn-outline">Delete Build</button>
        </form>
        </div>
    </div>
    </section>

  <section class="admin-section" id="sec-forsale">
    <div class="admin-section__head">
      <h2>For Sale</h2>
      <div class="admin-section__tabs">
        <button class="tab is-active" data-tab="add-sale">Add</button>
        <button class="tab" data-tab="update-sale">Update</button>
        <button class="tab" data-tab="delete-sale">Delete</button>
      </div>
    </div> 

    <div class="admin-section__body">
      <!-- ADD SALE -->
      <form id="add-sale" class="panel is-active stack gap-m"
        action="/admin/for-sale/add" method="post" enctype="multipart/form-data">
        <label>
          <span>Vehicle Name (Year, Make, Model)</span>
          <input type="text" name="title" required maxlength="300" />
        </label>

        <label>
          <span>Description</span>
          <textarea name="description" rows="5" placeholder="Details, highlights, work done, etc."></textarea>
        </label>

        <fieldset>
          <legend>Photos (up to 16)</legend>
          <input type="file" name="photos" accept="image/*" multiple />
          <p class="hint">Suggested 8–12 photos. Max 16 will be saved.</p>
        </fieldset>

        <button type="submit" class="btn-red">Add For Sale Item</button>
      </form>

      <!-- Update For-Sale -->
      <div id="update-sale" class="panel stack gap-m">
        <form action="/admin/for-sale/update" method="post" enctype="multipart/form-data" class="stack gap-m">

          <!-- choose item -->
          <label>
            <span>Choose item</span>
            <select name="item_id" id="fs-item-select" required>
              <% (forSale || []).forEach(i => { %>
                <option value="<%= i.id %>"><%= i.title %></option>
              <% }) %>
            </select>
          </label>

          <label>Is this listing active?:
            <select name="is_active_mode">
              <option value="">(no change)</option>
              <option value="1">Set active</option>
              <option value="0">Set inactive</option>
            </select>
          </label>

          <!-- title -->
          <label>
            <span>Title</span>
            <input type="text" name="title" placeholder="(no change)" id="fs-title" maxlength="160">
          </label>

          <!-- description -->
          <label>
            <span>Description</span>
            <textarea name="description" placeholder="(no change)" id="fs-desc" rows="5"></textarea>
          </label>

          <!-- current photos grid (auto-loads when item changes) -->
          <fieldset>
            <legend>Current photos</legend>
            <div id="fs-photo-grid" class="photo-grid"></div>
            <p class="hint">Click delete to remove, or choose a new file to replace a photo.</p>
          </fieldset>

          <!-- add new photos (appended after existing, total cap 16) -->
          <fieldset>
            <legend>Add photos (will append; total max 16)</legend>
            <div class="row" style="display:flex; gap:12px; align-items:center; flex-wrap:wrap;">
              <input type="file" name="new_photos" id="fs-new-photos" accept="image/*" multiple>
              <button type="button" id="fs-upload-btn" class="btn-outline">Upload selected</button>
              <span id="fs-upload-hint" class="hint" style="opacity:.85"></span>
            </div>
          </fieldset>

          <button type="submit" style="margin-top: 14px;" class="btn-red">Save Changes</button>
        </form>
      </div>

      <!-- DELETE SALE -->
      <form class="panel" id="delete-sale" action="/admin/for-sale/delete" method="post" onsubmit="return confirmDelete(this)">
        <label>Select Item to Delete
          <select name="item_id" required>
            <% (forSale || []).forEach(i => { %>
              <option value="<%= i.id %>"><%= i.title %></option>
            <% }) %>
          </select>
        </label>
        <button type="submit" class="btn-outline">Delete Listing</button>
      </form>
    </div>
  </section>











  <section class="admin-section" id="sec-team">
    <div class="admin-section__head">
      <h2>Team</h2>
      <div class="admin-section__tabs">
        <button class="tab is-active" data-tab="add-team">Add</button>
        <button class="tab" data-tab="update-team">Update</button>
        <button class="tab" data-tab="delete-team">Delete</button>
      </div>
    </div>

    <div class="admin-section__body">
      <!-- ADD TEAM -->
      <form class="panel is-active" id="add-team" action="/admin/team/add" method="post" enctype="multipart/form-data">
        <div class="admin-grid">
          <label>Name <input name="name" required></label>
          <label>Role/Title <input name="role" required></label>
          <fieldset>
            <legend>Photo</legend>
            <input type="file" name="photo" accept="image/*">
            <label class="row" style="margin-top:.5rem">
            </label>
          </fieldset>
        </div>
        <label>Bio
          <textarea name="bio" rows="4"></textarea>
        </label>
        <button type="submit" class="btn-red">Add Member</button>
      </form>

      <!-- UPDATE TEAM -->
      <form class="panel" id="update-team" action="/admin/team/update" method="post" enctype="multipart/form-data">
        <div class="team-sorter">
          <p class="hint">Drag to reorder team members (TOP TO BOTTOM)</p>
          <ul id="team-sort-list">
            <% (team || [])
              .sort((a,b)=>(a.sort_order ?? 1e9)-(b.sort_order ?? 1e9))
              .reverse()   // ← flip top/bottom in the UI
              .forEach(m => { %>
              <li class="team-sort-item" data-id="<%= m.id %>">
                <span><%= m.name %></span>
                <small style="opacity:.75"> — <%= m.role %></small>
              </li>
            <% }) %>
          </ul>
          <button type="button" id="save-team-order" class="btn-outline">Save Order</button>
        </div>        
        
        <label>Select Member
          <select name="member_id" required>
            <% (team || []).forEach(m => { %>
              <option value="<%= m.id %>"><%= m.name %> — <%= m.role %></option>
            <% }) %>
          </select>
        </label>



        <div class="admin-grid">
          <label>Name <input name="name" placeholder="(no change)"></label>
          <label>Role/Title <input name="role" placeholder="(no change)"></label>
          <fieldset>
            <legend>Replace Photo</legend>
            <input type="file" name="photo" accept="image/*">
            <label class="row" style="margin-top:.5rem">
            </label>
          </fieldset>
        </div>
        <label>Bio
          <textarea name="bio" rows="4" placeholder="(no change)"></textarea>
        </label>
        <button type="submit" class="btn-red">Save Changes</button>
      </form>

      <!-- DELETE TEAM-->
      <form class="panel" id="delete-team" action="/admin/team/delete" method="post" onsubmit="return confirmDelete(this)">
        <label>Select Member to Delete
          <select name="member_id" required>
            <% (team || []).forEach(m => { %>
              <option value="<%= m.id %>"><%= m.name %></option>
            <% }) %>
          </select>
        </label>
        <button type="submit" class="btn-outline">Delete Member</button>
      </form>
    </div>
  </section>

    <script>
    document.querySelectorAll('.admin-section').forEach(section => {
        const tabs = section.querySelectorAll('.tab');
        const panels = section.querySelectorAll('.panel');

        tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // remove active state from all tabs/panels
            tabs.forEach(t => t.classList.remove('is-active'));
            panels.forEach(p => p.classList.remove('is-active'));

            // activate clicked tab + its matching panel
            tab.classList.add('is-active');
            const targetId = tab.dataset.tab;
            const targetPanel = section.querySelector('#' + targetId);
            if (targetPanel) targetPanel.classList.add('is-active');
        });
        });
    });
    </script>
    <script>
    (function () {
      const sec = document.querySelector('#sec-builds');
      if (!sec) return;

      const kindTabs    = sec.querySelectorAll('.kind-tab');
      const kindPanels  = sec.querySelectorAll('.build-kind-panel');

      function show(kind, action) {
        // highlight kind tab
        kindTabs.forEach(btn => btn.classList.toggle('is-active', btn.dataset.kind === kind));

        // show the correct kind panel
        kindPanels.forEach(panel => panel.classList.toggle('is-active', panel.dataset.kindPanel === kind));

        // toggle which action row is visible
        sec.querySelectorAll('.tabs-build-action').forEach(row => {
          const on = row.dataset.kind === kind;
          row.classList.toggle('is-active', on);
          row.toggleAttribute('hidden', !on);
        });

        // activate the correct action tab within the visible row
        const actionRow = sec.querySelector(`.tabs-build-action[data-kind="${kind}"]`);
        const actionTabs = actionRow.querySelectorAll('.action-tab');
        actionTabs.forEach(btn => btn.classList.toggle('is-active', btn.dataset.tab === action));

        // show only the matching panel, e.g. "completed-update"
        sec.querySelectorAll('.build-kind-panel .panel').forEach(p => p.classList.remove('is-active'));
        const target = sec.querySelector(`#${kind}-${action}`);
        if (target) target.classList.add('is-active');
      }

      // kind tab clicks → switch kind, default to "add"
      kindTabs.forEach(btn => btn.addEventListener('click', () => show(btn.dataset.kind, 'add')));

      // action tab clicks (delegated per row)
      sec.querySelectorAll('.tabs-build-action').forEach(row => {
        row.addEventListener('click', (e) => {
          const btn = e.target.closest('.action-tab');
          if (!btn) return;
          show(row.dataset.kind, btn.dataset.tab);
        });
      });

      // init
      show('current', 'add');
    })();
    </script>

    <script>
      (function () {
        const form = document.getElementById('completed-update');
        if (!form) return;

        // When you create rows for existing bullets, set data-orig once:
        // input.setAttribute('data-orig', originalText);

        // Before submit, drop unchanged existing inputs from the payload
        form.addEventListener('submit', () => {
          const existingInputs = form.querySelectorAll('input[data-item-id][name^="sections_existing["]');
          existingInputs.forEach(inp => {
            const cur  = (inp.value || '').trim();
            const orig = (inp.getAttribute('data-orig') || '').trim();
            if (cur === orig) {
              // Prevent unchanged items from being submitted
              inp.setAttribute('data-skip', '1');
              inp.removeAttribute('name');
            }
          });
        });

        // Optional: if user edits then goes back to original, restore name (so new edits still submit)
        form.addEventListener('input', (e) => {
          const inp = e.target.closest('input[data-item-id]');
          if (!inp) return;
          const cur  = (inp.value || '').trim();
          const orig = (inp.getAttribute('data-orig') || '').trim();
          const sectionKey = inp.getAttribute('data-section'); // set this when you inject rows
          const id = inp.dataset.itemId;
          if (!id || !sectionKey) return;

          if (cur !== orig) {
            if (!inp.name) inp.name = `sections_existing[${sectionKey}][${id}]`;
          } else {
            if (inp.name) inp.removeAttribute('name');
          }
        });
      })();
    </script>

    <script>
      (function(){
        const sec = document.getElementById('completed-add');
        if (!sec) return;

        // add new bullet
        sec.querySelectorAll('.spec-add').forEach(btn => {
          btn.addEventListener('click', () => {
            const key = btn.dataset.target;                          // engine | chassis | interior | body
            const list = sec.querySelector(`.spec-list[data-section="${key}"]`);
            if (!list) return;

            const row = document.createElement('div');
            row.className = 'spec-row';
            row.innerHTML = `
              <input name="sections[${key}][]" placeholder="Add another item">
              <button type="button" class="spec-remove" aria-label="Remove item">&times;</button>
            `;
            list.appendChild(row);
          });
        });

        // remove a bullet (event delegation)
        sec.addEventListener('click', (e) => {
          if (e.target.classList.contains('spec-remove')) {
            const row = e.target.closest('.spec-row');
            if (!row) return;
            const list = row.parentElement;
            // keep at least one input present
            if (list.querySelectorAll('.spec-row').length > 1) {
              row.remove();
            } else {
              row.querySelector('input').value = '';
            }
          }
        });
      })();
      </script>
      <script>
      (function(){
        const form = document.getElementById('completed-update');
        if (!form) return;

        // add bullet row
        form.querySelectorAll('.spec-add').forEach(btn => {
          btn.addEventListener('click', () => {
            const key = btn.dataset.target;
            const list = form.querySelector(`.spec-list[data-section="${key}"]`);
            const row = document.createElement('div');
            row.className = 'spec-row';
            row.innerHTML = `
              <input name="sections[${key}][]" placeholder="Add bullet">
              <button type="button" class="spec-remove" aria-label="Remove item">&times;</button>
            `;
            list.appendChild(row);
          });
        });

        // remove bullet row 
        form.addEventListener('click', (e) => {
          if (!e.target.classList.contains('spec-remove')) return;
          const btn = e.target;
          const row = btn.closest('.spec-row');
          if (!row) return;

          // If this row represents an EXISTING bullet (has an ID), let the
          // other delete logic (with its confirm) handle it. Do nothing here.
          if (btn.dataset.itemId || row.querySelector('[data-item-id]')) return;

          // Brand-new unsaved row: remove immediately (allow zero rows)
          row.remove();
        });

         // Before submit, drop unchanged existing inputs from the payload
        form.addEventListener('submit', () => {
          const existingInputs = form.querySelectorAll('input[data-item-id][name^="sections_existing["]');
          existingInputs.forEach(inp => {
            const cur  = (inp.value || '').trim();
            const orig = (inp.getAttribute('data-orig') || '').trim();
            if (cur === orig) {
              // Prevent unchanged items from being submitted
              inp.setAttribute('data-skip', '1');
              inp.removeAttribute('name');
            }
          });
        });

        // Optional: if user edits then goes back to original, restore name (so new edits still submit)
        form.addEventListener('input', (e) => {
          const inp = e.target.closest('input[data-item-id]');
          if (!inp) return;
          const cur  = (inp.value || '').trim();
          const orig = (inp.getAttribute('data-orig') || '').trim();
          const sectionKey = inp.getAttribute('data-section'); // set this when you inject rows
          const id = inp.dataset.itemId;
          if (!id || !sectionKey) return;

          if (cur !== orig) {
            if (!inp.name) inp.name = `sections_existing[${sectionKey}][${id}]`;
          } else {
            if (inp.name) inp.removeAttribute('name');
          }
        });
      })();
      </script> 
      <script>
(function () {
  const sec = document.getElementById('sec-forsale');
  if (!sec) return;

  // Tabs wiring (same as yours)
  const tabs   = Array.from(sec.querySelectorAll('.admin-section__tabs .tab'));
  const panels = Array.from(sec.querySelectorAll('.admin-section__body .panel'));
  function activate(id){
    tabs.forEach(t => t.classList.toggle('is-active', t.dataset.tab === id));
    panels.forEach(p => p.classList.toggle('is-active', p.id === id));
  }
  tabs.forEach(t => t.addEventListener('click', () => activate(t.dataset.tab)));
  const current = tabs.find(t => t.classList.contains('is-active'))?.dataset.tab || 'add-sale';
  activate(current);

  // Elements
  const itemSelect = sec.querySelector('select[name="item_id"]');
  const grid       = sec.querySelector('#fs-photo-grid');
  const fileInput  = sec.querySelector('#fs-new-photos');   // <-- from the Add photos fieldset
  const uploadBtn  = sec.querySelector('#fs-upload-btn');   // <-- "Upload selected" button
  const hintEl     = sec.querySelector('#fs-upload-hint');  // <-- remaining-count hint

  // Helper: update "remaining" message
  function updateRemainingHint() {
    if (!grid || !hintEl || !uploadBtn) return;
    const count = grid.querySelectorAll('.photo-card').length;
    const remaining = Math.max(0, 16 - count);
    hintEl.textContent = `You can add up to ${remaining} more photo${remaining===1?'':'s'}.`;
    uploadBtn.disabled = remaining === 0;
  }

  // Load photos for selected item (builds the grid)
  async function loadPhotos(itemId){
    if (!grid || !itemId) return;
    grid.innerHTML = 'Loading…';
    try {
      const res = await fetch(`/admin/for-sale/${itemId}/photos`, { credentials: 'same-origin' });
      const data = await res.json(); // [{id, url, sort_order}, ...]
      grid.innerHTML = '';
      if (!Array.isArray(data) || !data.length) {
        grid.innerHTML = '<p class="hint">No photos yet.</p>';
        updateRemainingHint();
        return;
      }
      data.sort((a,b) => a.sort_order - b.sort_order).forEach(ph => {
        const card = document.createElement('div');
        card.className = 'photo-card';
        card.innerHTML = `
          <img src="${ph.url}" alt="photo ${ph.sort_order}">
          <form action="/admin/for-sale/photo/replace" method="post" enctype="multipart/form-data">
            <input type="hidden" name="item_id"  value="${itemId}">
            <input type="hidden" name="photo_id" value="${ph.id}">
            <label style="font-size:.85rem">Replace:
              <input type="file" name="new_photo" accept="image/*" required>
            </label>
            <button type="submit" class="btn-outline">Replace</button>
          </form>
          <form action="/admin/for-sale/photo/delete" method="post">
            <input type="hidden" name="item_id"  value="${itemId}">
            <input type="hidden" name="photo_id" value="${ph.id}">
            <button type="submit" class="btn-outline">Delete</button>
          </form>
        `;
        grid.appendChild(card);
      });
      updateRemainingHint();
    } catch (e) {
      console.error(e);
      grid.innerHTML = '<p class="bad">Failed to load photos.</p>';
      updateRemainingHint();
    }
  }

  // Live-replace preview without page reload
  grid.addEventListener('submit', async (e) => {
    const form = e.target.closest('form[action="/admin/for-sale/photo/replace"]');
    if (!form) return;            // ignore other forms
    e.preventDefault();

    const card = form.closest('.photo-card');
    const img  = card.querySelector('img');
    const btn  = form.querySelector('button[type="submit"]');

    try {
      btn.disabled = true;
      const originalText = btn.textContent;
      btn.textContent = 'Replacing…';

      const fd = new FormData(form);
      fd.append('ajax', '1'); // tell server to return JSON

      const res = await fetch(form.action, {
        method: 'POST',
        body: fd,
        headers: { 'Accept': 'application/json' }
      });

      if (!res.ok) throw new Error('Upload failed');
      const data = await res.json(); // { ok:true, url:"/uploads/for-sale/ID/X.jpg" }

      // Cache-bust so the new file shows immediately
      const base = (data.url || img.src).split('?')[0];
      img.src = `${base}?v=${Date.now()}`;

      form.reset();
      btn.textContent = 'Replaced ✓';
      setTimeout(() => { btn.textContent = originalText; btn.disabled = false; }, 800);
    } catch (err) {
      console.error(err);
      btn.disabled = false;
      alert('Could not replace the image. Please try again.');
    }
  });

  // Live-delete without page reload
  grid.addEventListener('submit', async (e) => {
    const form = e.target.closest('form[action="/admin/for-sale/photo/delete"]');
    if (!form) return; // ignore other forms
    e.preventDefault();

    if (!confirm('Delete this photo?')) return;

    const card = form.closest('.photo-card');
    const btn  = form.querySelector('button[type="submit"]');

    try {
      btn.disabled = true;
      const originalText = btn.textContent;
      btn.textContent = 'Deleting…';

      const fd = new FormData(form);
      fd.append('ajax', '1');

      const res = await fetch(form.action, {
        method: 'POST',
        body: fd,
        headers: { 'Accept': 'application/json' }
      });

      if (!res.ok) throw new Error('Delete failed');
      await res.json(); // { ok:true }

      card.remove(); // take it out of the grid
      updateRemainingHint();
    } catch (err) {
      console.error(err);
      alert('Could not delete photo. Please try again.');
      btn.disabled = false;
    }
  });

  // AJAX "Add photos" (no page reload)
  if (uploadBtn && fileInput) {
    uploadBtn.addEventListener('click', async () => {
      const itemId = itemSelect?.value;
      const files = fileInput.files;
      if (!itemId) return alert('Select an item first.');
      if (!files || !files.length) return alert('Choose one or more images.');

      const fd = new FormData();
      fd.append('item_id', itemId);
      Array.from(files).forEach(f => fd.append('photos', f));
      fd.append('ajax', '1');

      const original = uploadBtn.textContent;
      uploadBtn.disabled = true;
      uploadBtn.textContent = 'Uploading…';

      try {
        const res = await fetch('/admin/for-sale/photos/add', {
          method: 'POST',
          body: fd,
          headers: { 'Accept': 'application/json' }
        });
        const data = await res.json();
        if (!res.ok || !data.ok) {
          throw new Error(data?.error || 'Upload failed');
        }
        // refresh grid + hint
        await loadPhotos(itemId);
        fileInput.value = '';
        alert(data.message || 'Photos uploaded.');
      } catch (err) {
        console.error(err);
        alert(err.message || 'Could not upload photos.');
      } finally {
        uploadBtn.textContent = original;
        uploadBtn.disabled = false;
      }
    });
  }

  // Initial load + react to item change
  if (itemSelect && grid) {
    loadPhotos(itemSelect.value);
    itemSelect.addEventListener('change', () => loadPhotos(itemSelect.value));
  }
})();
</script>
<script>
(function(){
  const list = document.getElementById('team-sort-list');
  const save = document.getElementById('save-team-order');
  if (!list || !save) return;

  // Simple HTML5 drag & drop
  let dragEl = null;
  list.querySelectorAll('.team-sort-item').forEach(li => {
    li.draggable = true;
    li.addEventListener('dragstart', () => { dragEl = li; li.classList.add('dragging'); });
    li.addEventListener('dragend',   () => { li.classList.remove('dragging'); dragEl = null; });
  });

  list.addEventListener('dragover', (e) => {
    e.preventDefault();
    const after = [...list.querySelectorAll('.team-sort-item:not(.dragging)')]
      .find(el => e.clientY <= el.getBoundingClientRect().top + el.offsetHeight/2);
    if (!dragEl) return;
    after ? list.insertBefore(dragEl, after) : list.appendChild(dragEl);
  });

  // Save new order
  save.addEventListener('click', async () => {
    const order = [...list.querySelectorAll('.team-sort-item')]
      .map((li, i) => ({ id: li.dataset.id, sort: i+1 }));

    try {
      const res = await fetch('/admin/team/reorder', {
        method: 'POST',
        headers: { 'Content-Type':'application/json' },
        body: JSON.stringify({ order })
      });
      if (!res.ok) throw new Error();
      alert('Team order saved.');
    } catch {
      alert('Could not save order. Try again.');
    }
  });
})();
</script>
<script>
(function(){
  const form = document.getElementById('completed-update');
  if (!form) return;

  // YOUR existing select for choosing a completed build
  const select = form.querySelector('select[name="build_id"]');

  // Map our four sections to the exact lists you already have
  const lists = {
    engine:   form.querySelector('.spec-list[data-section="engine"]'),
    chassis:  form.querySelector('.spec-list[data-section="chassis"]'),
    interior: form.querySelector('.spec-list[data-section="interior"]'),
    body:     form.querySelector('.spec-list[data-section="body"]'),
  };

  // If you already have a function that creates a new row (e.g. addSpecRow),
  // feel free to swap this out and call yours. This helper mirrors common markup:
  function makeRow({ text = '', item_id = null }) {
    const row = document.createElement('div');
    row.className = 'spec-row';
    row.innerHTML = `
      <input
        ${item_id ? `data-item-id="${item_id}"` : ''}
        value="${(text || '').replace(/"/g, '&quot;')}"
      >
      <button type="button" class="spec-remove" ${item_id ? `data-item-id="${item_id}"` : ''}>&times;</button>
    `;
    return row;
  }

  // Optional: clear only the existing bullets that were injected previously.
  // We tag injected rows so we don't touch any rows you added but haven't saved yet.
  function clearInjected(listEl) {
    Array.from(listEl.querySelectorAll('.spec-row[data-injected="1"]')).forEach(el => el.remove());
  }

  async function loadExisting(buildId) {
    // clear previously injected rows in all lists
    Object.values(lists).forEach(clearInjected);

    // show a quick hint while loading (non-blocking)
    Object.values(lists).forEach(el => {
      if (!el.querySelector('.loading-hint')) {
        const h = document.createElement('div');
        h.className = 'loading-hint';
        h.style.fontSize = '12px';
        h.style.opacity = '0.7';
        h.textContent = 'Loading existing bullets…';
        el.prepend(h);
        setTimeout(() => h.remove(), 600);
      }
    });

    try {
      const res = await fetch(`/admin/builds/${buildId}/sections`, { credentials:'same-origin' });
      const data = await res.json();
      if (!data.ok) throw new Error(data.error || 'Failed to load');

      // For each of the four sections, inject existing items as normal rows
      for (const key of Object.keys(lists)) {
        const listEl = lists[key];
        const items = data.sections?.[key]?.items || [];
        items.forEach(it => {
          const row = makeRow({ text: it.text, item_id: it.id });
          row.dataset.injected = '1';           // mark as injected (existing)
          listEl.appendChild(row);
        });
      }
    } catch (e) {
      console.error(e);
      // soft error UI
      Object.values(lists).forEach(el => {
        const msg = document.createElement('div');
        msg.className = 'bad';
        msg.style.fontSize = '12px';
        msg.textContent = 'Could not load existing bullets.';
        el.prepend(msg);
        setTimeout(() => msg.remove(), 2000);
      });
    }
  }

  // SAVE on explicit action (Ctrl+S on input or small save button you may add).
  // If you prefer auto-save-on-blur, switch 'keydown' to 'blur' and remove the Ctrl+S check.
  form.addEventListener('keydown', async (e) => {
    if (e.key !== 's' || !e.ctrlKey) return;
    const input = e.target.closest('input[data-item-id]');
    if (!input) return;

    e.preventDefault();
    const id = input.dataset.itemId;
    const fd = new FormData();
    fd.append('item_id', id);
    fd.append('text', input.value || '');

    try {
      const res = await fetch('/admin/builds/section-item/update', { method:'POST', body: fd });
      if (!res.ok) throw new Error();
      input.classList.add('saved');
      setTimeout(() => input.classList.remove('saved'), 700);
    } catch {
      input.classList.add('error');
      setTimeout(() => input.classList.remove('error'), 1000);
      alert('Could not save. Try again.');
    }
  });

  // DELETE: if row has data-item-id, delete via API; if it’s a brand-new unsaved row, keep your existing remove behavior
  form.addEventListener('click', async (e) => {
    const btn = e.target.closest('.spec-remove');
    if (!btn) return;

    // Brand-new (no ID): let your current code handle it (if you have it)
    if (!btn.dataset.itemId) return;

    // Existing item: delete from DB, then remove row
    if (!confirm('Delete this bullet?')) return;
    const id = btn.dataset.itemId;
    const row = btn.closest('.spec-row');

    try {
      const fd = new FormData();
      fd.append('item_id', id);
      const res = await fetch('/admin/builds/section-item/delete', { method:'POST', body: fd });
      if (!res.ok) throw new Error();
      row.remove();
    } catch {
      alert('Could not delete. Try again.');
    }
  });

  // Load existing bullets when panel opens or when the build selection changes
  if (select?.value) loadExisting(select.value);
  select?.addEventListener('change', () => loadExisting(select.value));
})();
</script>




</main>
